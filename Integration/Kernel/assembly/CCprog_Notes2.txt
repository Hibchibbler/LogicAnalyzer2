
WaitForAck:
 WaitLoop:    
    INPUT s0, PA_READ_LOGCAP_STATUS
    TEST  s0, 00001000'b          ;LogCap Ack?
    JUMP  Z, WaitLoop:
    RETURN

WaitForNonAck:
 WaitLoop:    
    INPUT s0, PA_READ_LOGCAP_STATUS
    TEST s0, 00001000'b          ;LogCap Ack?
    JUMP NZ, WaitLoop:
    RETURN    
    
IsUartDataPresent:
    INPUT s0, PA_READ_UART_STATUS
    TEST s0, 00000011'b          ; Rx Data Present?   
    RETURN

; LogCap Command Codes (C&C can issue these commands to LogCap)
CONSTANT CMD_LOGCAP_START,             00
CONSTANT CMD_LOGCAP_ABORT,             01
CONSTANT CMD_LOGCAP_STATUS,            02
CONSTANT CMD_LOGCAP_TRIG_CONFIGURE,    03
CONSTANT CMD_LOGCAP_BUFF_CONFIGURE,    04
CONSTANT CMD_LOGCAP_DUMP,              05
CONSTANT CMD_LOGCAP_ACK,               06
CONSTANT CMD_LOGCAP_TRACE_SIZE,        07
CONSTANT CMD_LOGCAP_TRIGGER_SAMPLE,    08
CONSTANT CMD_LOGCAP_RESET,             09

; C&C Command Codes  (Frontend can send these command codes to C&C) or (C&C will receive these commands from the Frontend)
CONSTANT CMD_CC_START,             00
CONSTANT CMD_CC_ABORT,             01
CONSTANT CMD_CC_STATUS,            02
CONSTANT CMD_CC_TRIG_CONFIGURE,    03
CONSTANT CMD_CC_BUFF_CONFIGURE,    04
CONSTANT CMD_CC_DUMP,              05
CONSTANT CMD_CC_TRACE_SIZE,        07
CONSTANT CMD_CC_TRIGGER_SAMPLE,    08


CONSTANT CMD_CC_CMD_SIZE,          09 ;Header+Payload  

; -----------------------------------------------------------------------------
; MAIN LOOP Start
; -----------------------------------------------------------------------------    
ADDRESS 000
    JUMP    main                        ; workaround to avoid location 3 corruption
    JUMP    main                        ; by Vivado Hardware Manager.  Bug was flagged by
    JUMP    main                        ; Ken Chapman and is known to be in 2014.2
    JUMP    main                        ; Address 003 can be corrupted by Vivado HW manager
                                                    ;
main:
           
    LOAD    s1,     00                  ; clear the semaphore
    STORE   s1,     SP_SEM              ;

    ENABLE  INTERRUPT                   ; get the ball rolling
    
InitializeFirmwareLoop:
    LOAD bufferIndex, 00
FirmwareLoop:
    CALL IsUartDataPresent
    JUMP Z, CheckCmd                ;No data present, goto CheckCmd
    INPUT datum, PA_READ_UART_DATA  ;data is present, add to buffer
    STORE datum, (bufferIndex)
    ADD bufferIndex, 01
CheckCmd:
    COMPARE bufferIndex, CMD_CC_CMD_SIZE
    JUMP Z, ProcessCommand          ;We have a full command, process it.
    JUMP    Upkeep                  ;We do not have a full command, nothing to process.
ProcessCommand:
    LOAD index, 00
    FETCH cmd, (index)
ProcessIfStartCmd:
    COMPARE cmd, CMD_CC_START
    JUMP NZ, ProcessIfAbortCmd
    ; Process Start
    CALL ProcessStart
    JUMP DoneProcessing
ProcessIfAbortCmd:
    COMPARE cmd, CMD_CC_ABORT
    JUMP NZ, ProcessIfStatusCmd
    ; Process Abort
    CALL ProcessAbort
    JUMP DoneProcessing
ProcessIfStatusCmd:
    COMPARE cmd, CMD_CC_STATUS
    JUMP NZ, ProcessIfTrigConfCmd
    ; Process Status request
    CALL ProcessStatus
    JUMP DoneProcessing
ProcessIfTrigConfCmd:
    COMPARE cmd, CMD_CC_TRIG_CONFIGURE
    JUMP NZ, ProcessIfBuffConfCmd
    ; Process Trigger Configuration
    CALL ProcessTrigConf
    JUMP DoneProcessing
ProcessIfBuffConfCmd:
    COMPARE cmd, CMD_CC_BUFF_CONFIGURE
    JUMP NZ, ProcessIfDumpCmd
    ; Process Buffer Configuration
    CALL ProcessBuffConf
    JUMP DoneProcessing
ProcessIfDumpCmd:
    COMPARE cmd, CMD_CC_DUMP
    JUMP NZ, ProcessIfTraceSize
    ; Process Dump
    CALL ProcessDump
    JUMP DoneProcessing
ProcessIfTraceSize:
    COMPARE cmd, CMD_TRACE_SIZE
    JUMP NZ, ProcessIfTriggerSampleCmd
    ; Process the Trace Size request
    CALL ProcessTraceSize
    JUMP DoneProcessing
ProcessIfTriggerSample:
    COMPARE cmd, CMD_TRIGGER_SAMPLE
    ; Process Trigger Sample request
    CALL ProcessTriggerSample
    JUMP DoneProcessing    
DoneProcessing:  
Upkeep:
    FETCH   s6,     SP_SEM                  ;If interrupt fired, SP_SEM != 0
    COMPARE s6,     00      
    JUMP    Z,      FirmwareLoopEnd         ;If not, then skip LED toggle
    
    FETCH s1, SP_LED_15_8                   ; So, toggle hi LEDs
    XOR s1, FF
    CALL LED_wrleds_hi
    
    FETCH   s6,             SP_SEM          ; prepare for next interrupt
    SUB     s6,             01
    STORE   s6,             SP_SEM     

FirmwareLoopEnd:
    JUMP FirmwareLoop
; -----------------------------------------------------------------------------
; MAIN LOOP Ends
; -----------------------------------------------------------------------------    
    
ProcessStart:
    OUTPUT StartCmdCode, PA_WRITE_LOGCAP_COMMAND
    CALL WaitForAck
    OUTPUT AckCmdCode, PA_WRITE_LOGCAP_COMMAND
    CALL WaitForNonAck
    RETURN
    
ProcessAbort:
    OUTPUT AbortCmdCode, PA_WRITE_LOGCAP_COMMAND
    CALL WaitForAck
    OUTPUT AckCmdCode, PA_WRITE_LOGCAP_COMMAND
    CALL WaitForNonAck
    RETURN
    
ProcessTrigConf:
    LOAD index, 01

    FETCH datum, (index)
    ADD index, 01
    OUTPUT datum, PA_WRITE_LOGCAP_REGISTER0

    FETCH datum, (index)
    ADD index, 01
    OUTPUT datum, PA_WRITE_LOGCAP_REGISTER1


    FETCH datum, (index)
    ADD index, 01
    OUTPUT datum, PA_WRITE_LOGCAP_REGISTER2

    FETCH datum, (index)
    ADD index, 01
    OUTPUT datum, PA_WRITE_LOGCAP_REGISTER3

    FETCH datum, (index)
    ADD index, 01
    OUTPUT datum, PA_WRITE_LOGCAP_REGISTER4

    FETCH datum, (index)
    ADD index, 01
    OUTPUT datum, PA_WRITE_LOGCAP_REGISTER5

    FETCH datum, (index)
    ADD index, 01
    OUTPUT datum, PA_WRITE_LOGCAP_REGISTER6

    FETCH datum, (index)
    ADD index, 01
    OUTPUT datum, PA_WRITE_LOGCAP_REGISTER7

    OUTPUT ConfTrigCmdCode, PA_WRITE_LOGCAP_COMMAND
    CALL WaitForAck
    OUTPUT AckCmdCode, PA_WRITE_LOGCAP_COMMAND     ; Notify LogCap that we know that they read what we wrote
    CALL WaitForNonAck
    RETURN
    
ProcessBuffConf:
    LOAD index, 01

    FETCH datum, (index)
    ADD index, 01
    OUTPUT datum, PA_WRITE_LOGCAP_REGISTER0

    FETCH datum, (index)
    ADD index, 01;
    OUTPUT datum, PA_WRITE_LOGCAP_REGISTER1

    FETCH datum, (index)
    ADD index, 01
    OUTPUT datum, PA_WRITE_LOGCAP_REGISTER2

    FETCH datum, (index)
    ADD index, 01
    OUTPUT datum, PA_WRITE_LOGCAP_REGISTER3
        
    OUTPUT ConfBuffCmdCode, PA_WRITE_LOGCAP_COMMAND
    CALL WaitForAck
    OUTPUT AckCmdCode, PA_WRITE_LOGCAP_COMMAND
    CALL WaitForNonAck
    RETURN


ProcessDump:
    ; Figure out how much we need to read (total)
    OUTPUT CMD_LOGCAP_TRACE_SIZE, PA_WRITE_LOGCAP_COMMAND
    CALL WaitForAck
    INPUT payloadSize0, PA_READ_LOGCAP_REGISTER0; Get Total Trace Data Size
    INPUT payloadSize1, PA_READ_LOGCAP_REGISTER1
    INPUT payloadSize2, PA_READ_LOGCAP_REGISTER2
    INPUT payloadSize3, PA_READ_LOGCAP_REGISTER3
    OUTPUT AckCmdCode, PA_WRITE_LOGCAP_COMMAND     ; Notify LogCap that we read the data 
    CALL WaitForNonAck

    total = payloadSize0<<24 & payloadSize1<<16 & payloadSize2<<8 & payloadSize3<<0
    ;CALL SendHeaderToFrontend(DUMP, total)
    OUTPUT DumpCmdCode, PA_WRITE_UART_DATA
    OUTPUT PayloadSizeByte0, PA_WRITE_UART_DATA      
    OUTPUT PayloadSizeByte1, PA_WRITE_UART_DATA      
    OUTPUT PayloadSizeByte2, PA_WRITE_UART_DATA      
    OUTPUT PayloadSizeByte3, PA_WRITE_UART_DATA      

 DoChunkTransfer:
       
    OUTPUT CMD_LOGCAP_DUMP, PA_WRITE_LOGCAP_COMMAND    ; Notify LogCap that we want DUMP data
    CALL WaitForAck              ; Wait for LogCap to acknowledge
    INPUT chunk0, PA_READ_LOGCAP_REGISTER0; Get Total Trace Data Size
    INPUT chunk1, PA_READ_LOGCAP_REGISTER1
    INPUT chunk2, PA_READ_LOGCAP_REGISTER2
    INPUT chunk3, PA_READ_LOGCAP_REGISTER3      
    INPUT chunk4, PA_READ_LOGCAP_REGISTER4
    INPUT chunk5, PA_READ_LOGCAP_REGISTER5
    INPUT chunk6, PA_READ_LOGCAP_REGISTER6
    INPUT chunk7, PA_READ_LOGCAP_REGISTER7

    OUTPUT CMD_LOGCAP_ACK, PA_WRITE_LOGCAP_COMMAND     ; Notify LogCap that we read the data 
    CALL WaitForNonAck               ; Wait for LogCap to acknowledge

    OUTPUT chunk0, PA_WRITE_UART_DATA      
    OUTPUT chunk1, PA_WRITE_UART_DATA      
    OUTPUT chunk2, PA_WRITE_UART_DATA      
    OUTPUT chunk3, PA_WRITE_UART_DATA     
    OUTPUT chunk4, PA_WRITE_UART_DATA      
    OUTPUT chunk5, PA_WRITE_UART_DATA      
    OUTPUT chunk6, PA_WRITE_UART_DATA      
    OUTPUT chunk7, PA_WRITE_UART_DATA

    ADD transfered, 08 ;must carry

    COMPARE transfered, total ;must carry; if carry set, transfered < total
    JUMP C, DoChunkTransfer   ; so, transfer another chunk.

    OUTPUT CMD_LOGCAP_RESET, PA_WRITE_LOGCAP_COMMAND  ;otherwise, we are done transfering chunks. reset LogCap.
    CALL WaitForAck
    OUTPUT CMD_LOGCAP_ACK, PA_WRITE_LOGCAP_COMMAND
    CALL WaitForNonAck

    LOAD index, 00                           ;reset buffer for next command
    RETURN
    

ProcessStatus:    
    ;Send Packet
    ; Header
    ;  Func Code      
    LOAD s1, CMD_CC_STATUS
    OUTPUT s1, PA_WRITE_UART_DATA
    ;  Payload Size - 1 Byte
    LOAD PayloadSizeByte0, 01
    LOAD PayloadSizeByte1, 00
    LOAD PayloadSizeByte2, 00
    LOAD PayloadSizeByte3, 00
    OUTPUT PayloadSizeByte0, PA_WRITE_UART_DATA          
    OUTPUT PayloadSizeByte1, PA_WRITE_UART_DATA          
    OUTPUT PayloadSizeByte2, PA_WRITE_UART_DATA          
    OUTPUT PayloadSizeByte3, PA_WRITE_UART_DATA       
    ; Payload      
    INPUT status, PA_READ_LOGCAP_STATUS   ; Read LogCap Status Register
    OUTPUT status, PA_WRITE_UART_DATA
    
    RETURN

    
ProcessTraceSize:
    OUTPUT CMD_LOGCAP_TRACE_SIZE, PA_WRITE_LOGCAP_COMMAND
    CALL WaitForAck
    INPUT traceSizeByte0, PA_READ_LOGCAP_REGISTER0; Get Total Trace Data Size
    INPUT traceSizeByte1, PA_READ_LOGCAP_REGISTER1
    INPUT traceSizeByte2, PA_READ_LOGCAP_REGISTER2
    INPUT traceSizeByte3, PA_READ_LOGCAP_REGISTER3
    OUTPUT CMD_LOGCAP_ACK, PA_WRITE_LOGCAP_COMMAND     ; Notify LogCap that we read the data 
    CALL WaitForNonAck

    ;total = traceSizeByte0<<24 & traceSizeByte1<<16 & traceSizeByte2<<8 & traceSizeByte3<<0

    ;Send Packet to Frontend
    ;  Func Code      
    LOAD   s1, CMD_CC_TRACE_SIZE
    OUTPUT s1, PA_WRITE_UART_DATA
    
    ;  Payload Size - 1 Byte
    LOAD PayloadSizeByte0, 04
    LOAD PayloadSizeByte1, 00
    LOAD PayloadSizeByte2, 00
    LOAD PayloadSizeByte3, 00    
    OUTPUT PayloadSizeByte0, PA_WRITE_UART_DATA          
    OUTPUT PayloadSizeByte1, PA_WRITE_UART_DATA          
    OUTPUT PayloadSizeByte2, PA_WRITE_UART_DATA          
    OUTPUT PayloadSizeByte3, PA_WRITE_UART_DATA     
    
    ; Payload
    OUTPUT traceSizeByte0, PA_WRITE_UART_DATA
    OUTPUT traceSizeByte1, PA_WRITE_UART_DATA
    OUTPUT traceSizeByte2, PA_WRITE_UART_DATA
    OUTPUT traceSizeByte3, PA_WRITE_UART_DATA
      
    RETURN
    
ProcessTriggerSample:
    OUTPUT CMD_LOGCAP_TRIGGER_SAMPLE, PA_WRITE_LOGCAP_COMMAND
    CALL WaitForAck
    INPUT triggerSampleByte0, PA_READ_LOGCAP_REGISTER0; Get Total Trace Data Size
    INPUT triggerSampleByte1, PA_READ_LOGCAP_REGISTER1
    INPUT triggerSampleByte2, PA_READ_LOGCAP_REGISTER2
    INPUT triggerSampleByte3, PA_READ_LOGCAP_REGISTER3
    OUTPUT CMD_LOGCAP_ACK, PA_WRITE_LOGCAP_COMMAND     ; Notify LogCap that we read the data 
    CALL WaitForNonAck

    ;total = triggerSampleByte0<<24 & triggerSampleByte1<<16 & triggerSampleByte2<<8 & triggerSampleByte3<<0

    ;Send Packet to Frontend
    ;  Func Code      
    LOAD   s1, CMD_CC_TRIGGER_SAMPLE
    OUTPUT s1, PA_WRITE_UART_DATA
    
    ;  Payload Size - 1 Byte
    LOAD PayloadSizeByte0, 04
    LOAD PayloadSizeByte1, 00
    LOAD PayloadSizeByte2, 00
    LOAD PayloadSizeByte3, 00    
    OUTPUT PayloadSizeByte0, PA_WRITE_UART_DATA          
    OUTPUT PayloadSizeByte1, PA_WRITE_UART_DATA          
    OUTPUT PayloadSizeByte2, PA_WRITE_UART_DATA          
    OUTPUT PayloadSizeByte3, PA_WRITE_UART_DATA     
    
    ; Payload
    OUTPUT triggerSampleByte0, PA_WRITE_UART_DATA
    OUTPUT triggerSampleByte1, PA_WRITE_UART_DATA
    OUTPUT triggerSampleByte2, PA_WRITE_UART_DATA
    OUTPUT triggerSampleByte3, PA_WRITE_UART_DATA
    RETURN
    
    
    
    
    
    
    




    SWITCH (cmd)
     CASE StatusRequest
      INPUT status, PA_READ_LOGCAP_STATUS   ; Read LogCap Status Register
      ;Send Packet
      ; Header
      ;  Func Code      
      LOAD s1, StatusCmdCode
      OUTPUT s1, PA_WRITE_UART_DATA
      LOAD s1, 0
      OUTPUT s1, PA_WRITE_UART_DATA
      ;  Payload Size - 1 Byte
      LOAD PayloadSizeByte0, 01
      OUTPUT PayloadSizeByte0, PA_WRITE_UART_DATA      
      LOAD PayloadSizeByte1, 00
      OUTPUT PayloadSizeByte1, PA_WRITE_UART_DATA      
      LOAD PayloadSizeByte2, 00
      OUTPUT PayloadSizeByte2, PA_WRITE_UART_DATA      
      LOAD PayloadSizeByte3, 00
      OUTPUT PayloadSizeByte3, PA_WRITE_UART_DATA   
      ; Payload      
      OUTPUT status, PA_WRITE_UART_DATA
     CASE Start
      OUTPUT StartCmdCode, PA_WRITE_LOGCAP_COMMAND
      CALL WaitForAck
      OUTPUT AckCmdCode, PA_WRITE_LOGCAP_COMMAND
      CALL WaitForNonAck
     CASE Abort
      OUTPUT AbortCmdCode, PA_WRITE_LOGCAP_COMMAND
      CALL WaitForAck
      OUTPUT AckCmdCode, PA_WRITE_LOGCAP_COMMAND
      CALL WaitForNonAck
     CASE Configure Trigger
      LOAD index, 01
       
      FETCH datum, (index)
      ADD index, 01
      OUTPUT datum, PA_WRITE_LOGCAP_REGISTER0

      FETCH datum, (index)
      ADD index, 01
      OUTPUT datum, PA_WRITE_LOGCAP_REGISTER1
      
      
      FETCH datum, (index)
      ADD index, 01
      OUTPUT datum, PA_WRITE_LOGCAP_REGISTER2
      
      FETCH datum, (index)
      ADD index, 01
      OUTPUT datum, PA_WRITE_LOGCAP_REGISTER3
      
      FETCH datum, (index)
      ADD index, 01
      OUTPUT datum, PA_WRITE_LOGCAP_REGISTER4
      
      FETCH datum, (index)
      ADD index, 01
      OUTPUT datum, PA_WRITE_LOGCAP_REGISTER5
      
      FETCH datum, (index)
      ADD index, 01
      OUTPUT datum, PA_WRITE_LOGCAP_REGISTER6
      
      FETCH datum, (index)
      ADD index, 01
      OUTPUT datum, PA_WRITE_LOGCAP_REGISTER7
      
      OUTPUT ConfTrigCmdCode, PA_WRITE_LOGCAP_COMMAND
      CALL WaitForAck
      OUTPUT AckCmdCode, PA_WRITE_LOGCAP_COMMAND     ; Notify LogCap that we know that they read what we wrote
      CALL WaitForNonAck
     CASE Configure Buffers
      LOAD index, 01
      
      FETCH datum, (index)
      ADD index, 01
      OUTPUT datum, PA_WRITE_LOGCAP_REGISTER0

      FETCH datum, (index)
      ADD index, 01;
      OUTPUT datum, PA_WRITE_LOGCAP_REGISTER1
      
      FETCH datum, (index)
      ADD index, 01
      OUTPUT datum, PA_WRITE_LOGCAP_REGISTER2
      
      FETCH datum, (index)
      ADD index, 01
      OUTPUT datum, PA_WRITE_LOGCAP_REGISTER3
            
      OUTPUT ConfBuffCmdCode, PA_WRITE_LOGCAP_COMMAND
      CALL WaitForAck
      OUTPUT AckCmdCode, PA_WRITE_LOGCAP_COMMAND
      CALL WaitForNonAck
     CASE Upload Buffer
      ; Figure out how much we need to read (total)
      OUTPUT StatusCmdCode, PA_WRITE_LOGCAP_COMMAND
      CALL WaitForAck
      INPUT payloadSize0, PA_READ_LOGCAP_REGISTER0; Get Total Trace Data Size
      INPUT payloadSize1, PA_READ_LOGCAP_REGISTER1
      INPUT payloadSize2, PA_READ_LOGCAP_REGISTER2
      INPUT payloadSize3, PA_READ_LOGCAP_REGISTER3
      OUTPUT AckCmdCode, PA_WRITE_LOGCAP_COMMAND     ; Notify LogCap that we read the data 
      CALL WaitForNonAck
      
      total = payloadSize0<<24 & payloadSize1<<16 & payloadSize2<<8 & payloadSize3<<0
      ;CALL SendHeaderToFrontend(DUMP, total)
      OUTPUT DumpCmdCode, PA_WRITE_UART_DATA
      OUTPUT PayloadSizeByte0, PA_WRITE_UART_DATA      
      OUTPUT PayloadSizeByte1, PA_WRITE_UART_DATA      
      OUTPUT PayloadSizeByte2, PA_WRITE_UART_DATA      
      OUTPUT PayloadSizeByte3, PA_WRITE_UART_DATA      
      
      while (transfered < total){
DoChunkTransfer:
       
       OUTPUT DumpCmdCode, PA_WRITE_LOGCAP_COMMAND    ; Notify LogCap that we want DUMP data
       CALL WaitForAck              ; Wait for LogCap to acknowledge
       INPUT chunk0, PA_READ_LOGCAP_REGISTER0; Get Total Trace Data Size
       INPUT chunk1, PA_READ_LOGCAP_REGISTER1
       INPUT chunk2, PA_READ_LOGCAP_REGISTER2
       INPUT chunk3, PA_READ_LOGCAP_REGISTER3      
       INPUT chunk4, PA_READ_LOGCAP_REGISTER4
       INPUT chunk5, PA_READ_LOGCAP_REGISTER5
       INPUT chunk6, PA_READ_LOGCAP_REGISTER6
       INPUT chunk7, PA_READ_LOGCAP_REGISTER7
      
       OUTPUT AckCmdCode, PA_WRITE_LOGCAP_COMMAND     ; Notify LogCap that we read the data 
       CALL WaitForNonAck               ; Wait for LogCap to acknowledge
       
       OUTPUT chunk0, PA_WRITE_UART_DATA      
       OUTPUT chunk1, PA_WRITE_UART_DATA      
       OUTPUT chunk2, PA_WRITE_UART_DATA      
       OUTPUT chunk3, PA_WRITE_UART_DATA     
       OUTPUT chunk4, PA_WRITE_UART_DATA      
       OUTPUT chunk5, PA_WRITE_UART_DATA      
       OUTPUT chunk6, PA_WRITE_UART_DATA      
       OUTPUT chunk7, PA_WRITE_UART_DATA
       
       ADD transfered, 08 ;must carry
      
      COMPARE transfered, total ;must carry; if carry set, transfered < total
      JUMP C, DoChunkTransfer   ; so, transfer another chunk.
      
      OUTPUT CmdCodeReset, PA_WRITE_LOGCAP_COMMAND  ;otherwise, we are done transfering chunks. reset LogCap.
      CALL WaitForAck
      OUTPUT AckCmdCode, PA_WRITE_LOGCAP_COMMAND
      CALL WaitForNonAck
      
      LOAD index, 00                           ;reset buffer for next command
Upkeep:
    FETCH   s6,     SP_SEM                  ;If interrupt fired, SP_SEM != 0
    COMPARE s6,     00      
    JUMP    Z,      FirmwareLoopEnd         ;If not, then skip LED toggle
    
    FETCH s1, SP_LED_15_8                   ; So, toggle hi LEDs
    XOR s1, FF
    CALL LED_wrleds_hi
    
    FETCH   s6,             SP_SEM          ; prepare for next interrupt
    SUB     s6,             01
    STORE   s6,             SP_SEM   
    
    JUMP FirmwareLoopEnd
FirmwareLoopEnd:    
    JUMP FirmwareLoop

; -----------------------------------------------------------------------------
; MAIN LOOP Ends
; -----------------------------------------------------------------------------    