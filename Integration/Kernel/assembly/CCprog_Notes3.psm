; -----------------------------------------------------------------
; Version:  0.0
; Author:   Daniel Ferguson
; Date:     
;
;
; ----------------------------------------------------------------- 

    
;  bit masks for pushbuttons and switches for seven segment emulator
CONSTANT    MSK_ALLBTNS,    1F      ; Buttons are in bits[5:0]
CONSTANT    MSK_PBTNS,      0F      ; Mask for 4 buttons to display on LED
CONSTANT    MSK_BTN_CENTER, 10      ; Pushbutton Center is bit 4
CONSTANT    MSK_BTN_WEST,   08      ; Pushbutton Left is bit 3
CONSTANT    MSK_BTN_NORTH,  04      ; Pushbutton Up is bit 2
CONSTANT    MSK_BTN_EAST,   02      ; Pushbutton Right is bit 1
CONSTANT    MSK_BTN_SOUTH,  01      ; Pushbutton Down is bit 0

CONSTANT    MSK_ALLSW_LO,   FF      ; Slide switches are in bits[7:0] of PA_SLSWTCH_07_00
CONSTANT    MSK_ALLSW_HI,   FF      ; Slide switchees are in bits[7:0] of PA_SLSWTCH_15_08
CONSTANT    MSK_SW7,        80      ; Slide switch 7 is bit 7
CONSTANT    MSK_SW6,        40      ; Slide switch 6 is bit 6
CONSTANT    MSK_SW5,        20      ; Slide switch 5 is bit 5
CONSTANT    MSK_SW4,        10      ; Slide switch 4 is bit 4
CONSTANT    MSK_SW3,        08      ; Slide switch 3 is bit 3
CONSTANT    MSK_SW2,        04      ; Slide switch 2 is bit 2
CONSTANT    MSK_SW1,        02      ; Slide switch 1 is bit 1
CONSTANT    MSK_SW0,        01      ; Slide switch 0 is bit 0

CONSTANT    MSK_SW15,       80      ; Slide switch 15 is bit 7
CONSTANT    MSK_SW14,       40      ; Slide switch 14 is bit 6
CONSTANT    MSK_SW13,       20      ; Slide switch 13 is bit 5
CONSTANT    MSK_SW12,       10      ; Slide switch 12 is bit 4
CONSTANT    MSK_SW11,       08      ; Slide switch 11 is bit 3
CONSTANT    MSK_SW10,       04      ; Slide switch 10 is bit 2
CONSTANT    MSK_SW09,       02      ; Slide switch 09 is bit 1
CONSTANT    MSK_SW08,       01      ; Slide switch 08 is bit 0


; bit mask for LEDs
CONSTANT    MSK_LEDS_LO,    FF      ; Mask for rightmost 8 LEDs on the Nexys4
CONSTANT    MSK_LEDS_HI,    FF      ; Mask for the lefmost 8 LEDs on the Nexys4



; nibble masks
CONSTANT    MSKLOWNIB,      0F      ; Mask out high nibble of byte
CONSTANT    MSKHIGHNIB,     F0      ; Mask out low nibble of byte
CONSTANT    INVLOWNIB,      0F      ; Invert low nibble of byte



; Scratch Pad Storage
;UART input buffer 
; Buffer bytes that are a part of commands from Frontend
; Every command from Frontend is 9 Bytes.
;  1 byte is Command Code, 8 Bytes are payload.
;  C&C is responsible for knowing what the format
;  of the payload is, based on command code.
CONSTANT    SP_UART_COMMAND_BYTE0,  00   
CONSTANT    SP_UART_COMMAND_BYTE1,  01
CONSTANT    SP_UART_COMMAND_BYTE2,  02
CONSTANT    SP_UART_COMMAND_BYTE3,  03
CONSTANT    SP_UART_COMMAND_BYTE4,  04
CONSTANT    SP_UART_COMMAND_BYTE5,  05
CONSTANT    SP_UART_COMMAND_BYTE6,  06
CONSTANT    SP_UART_COMMAND_BYTE7,  07
CONSTANT    SP_UART_COMMAND_BYTE8,  08
CONSTANT    SP_UART_COMMAND_BYTE9,  09
CONSTANT    SP_UART_COMMAND_BYTE10, 0A


CONSTANT    SP_SEM,         20      ; Semaphore between isr and main loop
CONSTANT    SP_TEMP1,       21      ; Temp storage.  Used by ISR
CONSTANT    SP_TEMP2,       22      ;
CONSTANT    SP_BUFFER_INDEX,23

CONSTANT    SP_TRACE_SIZE0, 24
CONSTANT    SP_TRACE_SIZE1, 25
CONSTANT    SP_TRACE_SIZE2, 26
CONSTANT    SP_TRACE_SIZE3, 27

CONSTANT    SP_TRANSFERRED0, 28
CONSTANT    SP_TRANSFERRED1, 29
CONSTANT    SP_TRANSFERRED2, 2A
CONSTANT    SP_TRANSFERRED3, 2B

CONSTANT    SP_LED_15_8,     2C

; Output Port Addresses
CONSTANT PA_WRITE_LOGCAP_REGISTER0, 00 
CONSTANT PA_WRITE_LOGCAP_REGISTER1, 01
CONSTANT PA_WRITE_LOGCAP_REGISTER2, 02
CONSTANT PA_WRITE_LOGCAP_REGISTER3, 03
CONSTANT PA_WRITE_LOGCAP_REGISTER4, 04
CONSTANT PA_WRITE_LOGCAP_REGISTER5, 05
CONSTANT PA_WRITE_LOGCAP_REGISTER6, 06
CONSTANT PA_WRITE_LOGCAP_REGISTER7, 07
CONSTANT PA_WRITE_LOGCAP_COMMAND,   08
CONSTANT PA_WRITE_UART_DATA,        09
CONSTANT PA_WRITE_LED_7_0,          0A
CONSTANT PA_WRITE_LED_15_8,         0B

; Input Port Addresses
CONSTANT PA_READ_LOGCAP_REGISTER0,  00 
CONSTANT PA_READ_LOGCAP_REGISTER1,  01
CONSTANT PA_READ_LOGCAP_REGISTER2,  02
CONSTANT PA_READ_LOGCAP_REGISTER3,  03
CONSTANT PA_READ_LOGCAP_REGISTER4,  04
CONSTANT PA_READ_LOGCAP_REGISTER5,  05
CONSTANT PA_READ_LOGCAP_REGISTER6,  06
CONSTANT PA_READ_LOGCAP_REGISTER7,  07
CONSTANT PA_READ_LOGCAP_STATUS,     08
CONSTANT PA_READ_UART_DATA,         09
CONSTANT PA_READ_UART_STATUS,       0A
CONSTANT PA_READ_SWITCHES_7_0,      0B
CONSTANT PA_READ_SWITCHES_15_8,     0C
CONSTANT PA_READ_BUTTONS,           0D


; LogCap Command Codes (Codes understood between C&C and LogCap)
CONSTANT CMD_LOGCAP_START,             00
CONSTANT CMD_LOGCAP_ABORT,             01
CONSTANT CMD_LOGCAP_STATUS,            02
CONSTANT CMD_LOGCAP_TRIG_CONFIGURE,    03
CONSTANT CMD_LOGCAP_BUFF_CONFIGURE,    04
CONSTANT CMD_LOGCAP_DUMP,              05
CONSTANT CMD_LOGCAP_ACK,               06
CONSTANT CMD_LOGCAP_TRACE_SIZE,        07
CONSTANT CMD_LOGCAP_TRIGGER_SAMPLE,    08
CONSTANT CMD_LOGCAP_RESET,             09

; C&C Command Codes  (Codes understood between C&C and Frontend)
CONSTANT CMD_FE_START,             00
CONSTANT CMD_FE_ABORT,             01
CONSTANT CMD_FE_STATUS,            02
CONSTANT CMD_FE_TRIG_CONFIGURE,    03
CONSTANT CMD_FE_BUFF_CONFIGURE,    04
CONSTANT CMD_FE_DUMP,              05
CONSTANT CMD_FE_TRACE_SIZE,        07
CONSTANT CMD_FE_TRIGGER_SAMPLE,    08

; This refers to the expected and fixed size
; of commands coming from the frontend. 9 bytes.
CONSTANT COMMAND_SIZE,          09 ;Header+Payload  (bytes)


; -----------------------------------------------------------------------------
; MAIN LOOP Start
; -----------------------------------------------------------------------------    
ADDRESS 000
EntryPoint:
    JUMP    Prologue                    ; workaround to avoid location 3 corruption
    JUMP    Prologue                    ; by Vivado Hardware Manager.  Bug was flagged by
    JUMP    Prologue                    ; Ken Chapman and is known to be in 2014.2
    JUMP    Prologue                    ; Address 003 can be corrupted by Vivado HW manager
                                                    ;
Prologue:

    LOAD    s1,     00                  ; clear the semaphore
    STORE   s1,     SP_SEM              ;
    STORE   s1,     SP_BUFFER_INDEX     ; zero the sp buffer (used for incoming uart data) (we will use scratch pad memory to store bytes until there are enough to process a command)

    ENABLE  INTERRUPT                   ; get the ball rolling
    
InitializeFirmwareLoop:
    
FirmwareLoop:    
    CALL    IsUartDataPresent           ;Sets Zero Flag is no data present...
    JUMP    Z, CheckCmd                 ;No data present, goto CheckCmd    
AddToBuffer:
    INPUT   s0, PA_READ_UART_DATA       ;data is present, add to buffer
    FETCH   s1, SP_BUFFER_INDEX         ;Fetch index, Store Data,Increment index, Store index
    STORE   s0, (s1)
    ADD     s1, 01
    STORE   s1, SP_BUFFER_INDEX
CheckCmd:                               ; If we have 9 bytes, then we can process the command.
    FETCH   s0, SP_BUFFER_INDEX
    COMPARE s0, COMMAND_SIZE
    JUMP    Z,  ProcessCommand          ;We have a full command. Go figure out what it is, and then process it.
    JUMP    Upkeep                      ;We do not have a full command, nothing to process. do upkeep.
ProcessCommand:
    LOAD    s0,  00
    FETCH   s1, (s0)                    ; pull out the command code
ProcessIfStartCmd:
    COMPARE s1, CMD_FE_START            ; start?
    JUMP    NZ, ProcessIfAbortCmd    
    CALL    ProcessStart                ; yup (these process functions are blocking)
    JUMP    DoneProcessing
ProcessIfAbortCmd:
    COMPARE s1, CMD_FE_ABORT            
    JUMP    NZ, ProcessIfStatusCmd
    CALL    ProcessAbort                ; Process Abort
    JUMP    DoneProcessing
ProcessIfStatusCmd:
    COMPARE s1, CMD_FE_STATUS
    JUMP    NZ, ProcessIfTrigConfCmd    
    CALL    ProcessStatus               ; Process Status request
    JUMP    DoneProcessing
ProcessIfTrigConfCmd:
    COMPARE s1, CMD_FE_TRIG_CONFIGURE
    JUMP    NZ, ProcessIfBuffConfCmd
    CALL    ProcessTrigConf             ; Process Trigger Configuration
    JUMP    DoneProcessing
ProcessIfBuffConfCmd:
    COMPARE s1, CMD_FE_BUFF_CONFIGURE
    JUMP    NZ, ProcessIfDumpCmd
    CALL    ProcessBuffConf             ; Process Buffer Configuration
    JUMP    DoneProcessing
ProcessIfDumpCmd:
    COMPARE s1, CMD_FE_DUMP
    JUMP    NZ, ProcessIfTraceSizeCmd
    CALL    ProcessDump                 ; Process Dump
    JUMP    DoneProcessing
ProcessIfTraceSizeCmd:
    COMPARE s1, CMD_FE_TRACE_SIZE
    JUMP    NZ, ProcessIfTriggerSampleCmd
    CALL    ProcessTraceSize            ; Process the Trace Size request
    JUMP    DoneProcessing
ProcessIfTriggerSampleCmd:
    COMPARE s1, CMD_FE_TRIGGER_SAMPLE
    CALL    ProcessTriggerSample        ; Process Trigger Sample request
    JUMP    DoneProcessing    
DoneProcessing:  
    LOAD    s1, 00                      ; Reset Buffer Index for next cmd
    STORE   s1, SP_BUFFER_INDEX
    
Upkeep:
    FETCH   s6, SP_SEM                  ;If interrupt fired, SP_SEM != 0
    COMPARE s6, 00      
    JUMP    Z,  FirmwareLoopEnd         ;If not, then skip LED toggle
    
    FETCH   s1, SP_LED_15_8             ; So, toggle hi LEDs
    XOR     s1, FF
    CALL    WriteLedsHi
    
    FETCH   s6, SP_SEM                  ; prepare for next interrupt
    SUB     s6, 01
    STORE   s6, SP_SEM     

FirmwareLoopEnd:
    JUMP    FirmwareLoop
; -----------------------------------------------------------------------------
; MAIN LOOP Ends
; -----------------------------------------------------------------------------    
; Functions Definitions Start
; -----------------------------------------------------------------------------            
ProcessStart:
    ;We received a Start from the Frontend.
    ; Notify the LogCap that is should Start
    LOAD    s0, CMD_LOGCAP_START
    OUTPUT  s0, PA_WRITE_LOGCAP_COMMAND    
    CALL    WaitForAck    
    LOAD    s0, CMD_LOGCAP_ACK
    OUTPUT  s0, PA_WRITE_LOGCAP_COMMAND
    CALL    WaitForNonAck
    RETURN
; -----------------------------------------------------------------------------
ProcessAbort:
    ;We received an Abort from the Frontend.
    ; Notify the LogCap that is should Abort
    LOAD    s0, CMD_LOGCAP_ABORT
    OUTPUT  s0, PA_WRITE_LOGCAP_COMMAND
    CALL    WaitForAck
    LOAD    s0, CMD_LOGCAP_ACK
    OUTPUT  s0, PA_WRITE_LOGCAP_COMMAND
    CALL    WaitForNonAck
    RETURN
; -----------------------------------------------------------------------------
ProcessTrigConf:    
    ;We must load the trigger config info from
    ; UART buffer into LogCap registers. 
    ;Then we notify LogCap of our trespass
    LOAD    s0, 01

    FETCH   s1, (s0)
    ADD     s0, 01
    OUTPUT  s1, PA_WRITE_LOGCAP_REGISTER0

    FETCH   s1, (s0)
    ADD     s0, 01
    OUTPUT  s1, PA_WRITE_LOGCAP_REGISTER1


    FETCH   s1, (s0)
    ADD     s0, 01
    OUTPUT  s1, PA_WRITE_LOGCAP_REGISTER2

    FETCH   s1, (s0)
    ADD     s0, 01
    OUTPUT  s1, PA_WRITE_LOGCAP_REGISTER3

    FETCH   s1, (s0)
    ADD     s0, 01
    OUTPUT  s1, PA_WRITE_LOGCAP_REGISTER4

    FETCH   s1, (s0)
    ADD     s0, 01
    OUTPUT  s1, PA_WRITE_LOGCAP_REGISTER5

    FETCH   s1, (s0)
    ADD     s0, 01
    OUTPUT  s1, PA_WRITE_LOGCAP_REGISTER6

    FETCH   s1, (s0)
    ADD     s0, 01
    OUTPUT  s1, PA_WRITE_LOGCAP_REGISTER7

    LOAD    s0, CMD_LOGCAP_TRIG_CONFIGURE
    OUTPUT  s0, PA_WRITE_LOGCAP_COMMAND
    CALL    WaitForAck
    LOAD    s0, CMD_LOGCAP_ACK
    OUTPUT  s0, PA_WRITE_LOGCAP_COMMAND     ; Notify LogCap that we know that they read what we wrote
    CALL    WaitForNonAck
    RETURN
; -----------------------------------------------------------------------------
ProcessBuffConf:
    ;We must load the buffer config info from
    ; UART buffer into LogCap registers. 
    ;Then we notify LogCap of our trespass
    LOAD    s0, 01

    FETCH   s1, (s0)
    ADD     s0, 01
    OUTPUT  s1, PA_WRITE_LOGCAP_REGISTER0

    FETCH   s1, (s0)
    ADD     s0, 01;
    OUTPUT  s1, PA_WRITE_LOGCAP_REGISTER1

    FETCH   s1, (s0)
    ADD     s0, 01
    OUTPUT  s1, PA_WRITE_LOGCAP_REGISTER2

    FETCH   s1, (s0)
    ADD     s0, 01
    OUTPUT  s1, PA_WRITE_LOGCAP_REGISTER3
        
    LOAD    s0, CMD_LOGCAP_BUFF_CONFIGURE
    OUTPUT  s0, PA_WRITE_LOGCAP_COMMAND
    CALL    WaitForAck
    LOAD    s0, CMD_LOGCAP_ACK
    OUTPUT  s0, PA_WRITE_LOGCAP_COMMAND
    CALL    WaitForNonAck
    RETURN

; -----------------------------------------------------------------------------
ProcessDump:
    ; First, figure out the Total number of bytes we'll be readin from LogCap
    ; Second, we begin to send a Dump message to the Frontend. 
    ;  We start by sending a Dump header
    ;  [cmdCode'(DUMP) |   Total bytes ] 
    ;  [ 1 byte        |   4 bytes     ]
    LOAD    s0, CMD_LOGCAP_TRACE_SIZE
    OUTPUT  s0, PA_WRITE_LOGCAP_COMMAND
    CALL    WaitForAck
    INPUT   s0, PA_READ_LOGCAP_REGISTER0; Get Total Trace Data Size. byte 1
    INPUT   s1, PA_READ_LOGCAP_REGISTER1; byte 2
    INPUT   s2, PA_READ_LOGCAP_REGISTER2; byte 3
    INPUT   s3, PA_READ_LOGCAP_REGISTER3; byte 4
    
    LOAD    sF, CMD_LOGCAP_ACK
    OUTPUT  sF, PA_WRITE_LOGCAP_COMMAND     ; Notify LogCap that we read the data 
    CALL    WaitForNonAck

    ;total = payloadSize0<<24 & payloadSize1<<16 & payloadSize2<<8 & payloadSize3<<0
    
    ; Store Trace Length in SP
    STORE s0, SP_TRACE_SIZE0
    STORE s1, SP_TRACE_SIZE1
    STORE s2, SP_TRACE_SIZE2
    STORE s3, SP_TRACE_SIZE3
    
    ;Zero out our transfer count (in SP)
    LOAD  s4, 00
    STORE s4, SP_TRANSFERRED0
    STORE s4, SP_TRANSFERRED1
    STORE s4, SP_TRANSFERRED2
    STORE s4, SP_TRANSFERRED3
    
    ; Dump Header (Consumed by Frontend)
    LOAD    s0, CMD_FE_DUMP
    OUTPUT  s0, PA_WRITE_UART_DATA
    OUTPUT  s0, PA_WRITE_UART_DATA      
    OUTPUT  s1, PA_WRITE_UART_DATA      
    OUTPUT  s2, PA_WRITE_UART_DATA      
    OUTPUT  s3, PA_WRITE_UART_DATA      

 DoChunkTransfer:
    ; Then, Until all bytes have been transfered
    ;  Read 8 bytes from LogCap
    ;  Write 8 bytes (1 byte at a time) to Frontend
    LOAD    s0, CMD_LOGCAP_DUMP
    OUTPUT  s0, PA_WRITE_LOGCAP_COMMAND    ; Notify LogCap that we want DUMP data
    CALL    WaitForAck                                  ; Wait for LogCap to acknowledge
    INPUT   s0, PA_READ_LOGCAP_REGISTER0                ; Get 8 bytes of Dump Data
    INPUT   s1, PA_READ_LOGCAP_REGISTER1
    INPUT   s2, PA_READ_LOGCAP_REGISTER2
    INPUT   s3, PA_READ_LOGCAP_REGISTER3      
    INPUT   s4, PA_READ_LOGCAP_REGISTER4
    INPUT   s5, PA_READ_LOGCAP_REGISTER5
    INPUT   s6, PA_READ_LOGCAP_REGISTER6
    INPUT   s7, PA_READ_LOGCAP_REGISTER7
    LOAD    s8, CMD_LOGCAP_ACK
    OUTPUT  s8, PA_WRITE_LOGCAP_COMMAND     ; Notify LogCap that we read the data 
    CALL    WaitForNonAck                               ; Wait for LogCap to acknowledge

    OUTPUT  s0, PA_WRITE_UART_DATA                      ; Send 8 bytes of Dump data to Frontend
    OUTPUT  s1, PA_WRITE_UART_DATA      
    OUTPUT  s2, PA_WRITE_UART_DATA      
    OUTPUT  s3, PA_WRITE_UART_DATA     
    OUTPUT  s4, PA_WRITE_UART_DATA      
    OUTPUT  s5, PA_WRITE_UART_DATA      
    OUTPUT  s6, PA_WRITE_UART_DATA      
    OUTPUT  s7, PA_WRITE_UART_DATA

    
    ;Add 8 to transferred tally - 32bit values require us to use craZy carry mechanism
    FETCH   s8, SP_TRANSFERRED0                          
    ADD     s8, 08                              
    STORE   s8, SP_TRANSFERRED0
    
    FETCH   s8, SP_TRANSFERRED1
    ADDCY   s8, 00
    STORE   s8, SP_TRANSFERRED1
    
    FETCH   s8, SP_TRANSFERRED2
    ADDCY   s8, 00
    STORE   s8, SP_TRANSFERRED2
    
    FETCH   s8, SP_TRANSFERRED3
    ADDCY   s8, 00
    STORE   s8, SP_TRANSFERRED3
    
    ;transferred - total != 0 ?  (crazy carrry shtuff)
    FETCH   s8, SP_TRANSFERRED0
    FETCH   s9, SP_TRACE_SIZE0                          
    SUB     s8, s9                              
    
    FETCH   s8, SP_TRANSFERRED1
    FETCH   s9, SP_TRACE_SIZE1
    SUBCY   s8, s9
    
    FETCH   s8, SP_TRANSFERRED2
    FETCH   s9, SP_TRACE_SIZE2
    SUBCY   s8, s9
    
    FETCH   s8, SP_TRANSFERRED3
    FETCH   s9, SP_TRACE_SIZE3
    SUBCY   s8, s9
    
    JUMP NZ, DoChunkTransfer    ; based on zero flag from last SUBCY. transferred - total != 0
                                ; transferred - total == 0
                                ; We've finished transferring all bytes from LogCap
                                ; to Frontend.
    LOAD    s0, CMD_LOGCAP_RESET
    OUTPUT  s0, PA_WRITE_LOGCAP_COMMAND   ; Else, we are done transferring chunks. reset LogCap.
    CALL    WaitForAck
    LOAD    s0, CMD_LOGCAP_ACK
    OUTPUT  s0, PA_WRITE_LOGCAP_COMMAND
    CALL    WaitForNonAck

    RETURN
    
; -----------------------------------------------------------------------------
ProcessStatus:    
    ; Read LogCap Status Register
    ; And send it to the Frontend
    
    ;Send Packet
    ; Header
    ;  Func Code      
    LOAD    s4, CMD_FE_STATUS
    OUTPUT  s4, PA_WRITE_UART_DATA
    ;  Payload Size - 1 Byte
    LOAD    s0, 01
    LOAD    s1, 00
    LOAD    s2, 00
    LOAD    s3, 00
    OUTPUT  s0, PA_WRITE_UART_DATA          
    OUTPUT  s1, PA_WRITE_UART_DATA          
    OUTPUT  s2, PA_WRITE_UART_DATA          
    OUTPUT  s3, PA_WRITE_UART_DATA       
    ; Payload      
    INPUT   s0, PA_READ_LOGCAP_STATUS   ; Read LogCap Status Register
    OUTPUT  s0, PA_WRITE_UART_DATA      ; Write Uart tx Register
    
    RETURN

; -----------------------------------------------------------------------------
ProcessTraceSize:
    ; Get the Trace Size from LogCap
    ; And send it to the Frontend
    LOAD    s0, CMD_LOGCAP_TRACE_SIZE
    OUTPUT  s0, PA_WRITE_LOGCAP_COMMAND
    CALL    WaitForAck
    INPUT   s0, PA_READ_LOGCAP_REGISTER0; Get Total Trace Data Size
    INPUT   s1, PA_READ_LOGCAP_REGISTER1
    INPUT   s2, PA_READ_LOGCAP_REGISTER2
    INPUT   s3, PA_READ_LOGCAP_REGISTER3
    LOAD    s4, CMD_LOGCAP_ACK
    OUTPUT  s4, PA_WRITE_LOGCAP_COMMAND     ; Notify LogCap that we read the data 
    CALL    WaitForNonAck

    ;total = traceSizeByte0<<24 & traceSizeByte1<<16 & traceSizeByte2<<8 & traceSizeByte3<<0

    ;Send Packet to Frontend
    ;  Func Code      
    LOAD    s4, CMD_FE_TRACE_SIZE
    OUTPUT  s4, PA_WRITE_UART_DATA
    
    ;  Payload Size - 4 Bytes
    LOAD    s4, 04
    LOAD    s5, 00
    LOAD    s6, 00
    LOAD    s7, 00    
    OUTPUT  s4, PA_WRITE_UART_DATA          
    OUTPUT  s5, PA_WRITE_UART_DATA          
    OUTPUT  s6, PA_WRITE_UART_DATA          
    OUTPUT  s7, PA_WRITE_UART_DATA     
    
    ; Payload
    OUTPUT  s0, PA_WRITE_UART_DATA
    OUTPUT  s1, PA_WRITE_UART_DATA
    OUTPUT  s2, PA_WRITE_UART_DATA
    OUTPUT  s3, PA_WRITE_UART_DATA
      
    RETURN
; -----------------------------------------------------------------------------
ProcessTriggerSample:
    ; Get the Sample number that caused the trigger from LogCap
    ; And send it to the Frontend
    LOAD    s0, CMD_LOGCAP_TRIGGER_SAMPLE
    OUTPUT  s0, PA_WRITE_LOGCAP_COMMAND
    CALL    WaitForAck
    INPUT   s0, PA_READ_LOGCAP_REGISTER0; Get Total Trace Data Size
    INPUT   s1, PA_READ_LOGCAP_REGISTER1
    INPUT   s2, PA_READ_LOGCAP_REGISTER2
    INPUT   s3, PA_READ_LOGCAP_REGISTER3
    LOAD    s4, CMD_LOGCAP_ACK
    OUTPUT  s4, PA_WRITE_LOGCAP_COMMAND     ; Notify LogCap that we read the data 
    CALL    WaitForNonAck

    ;total = triggerSampleByte0<<24 & triggerSampleByte1<<16 & triggerSampleByte2<<8 & triggerSampleByte3<<0

    ;Send Packet to Frontend
    ;  Func Code      
    LOAD    s4, CMD_FE_TRIGGER_SAMPLE
    OUTPUT  s4, PA_WRITE_UART_DATA
    
    ;  Payload Size - 4 Bytes
    LOAD    s4, 04
    LOAD    s5, 00
    LOAD    s6, 00
    LOAD    s7, 00    
    OUTPUT  s4, PA_WRITE_UART_DATA          
    OUTPUT  s5, PA_WRITE_UART_DATA          
    OUTPUT  s6, PA_WRITE_UART_DATA          
    OUTPUT  s7, PA_WRITE_UART_DATA     
    
    ; Payload
    OUTPUT  s0, PA_WRITE_UART_DATA
    OUTPUT  s1, PA_WRITE_UART_DATA
    OUTPUT  s2, PA_WRITE_UART_DATA
    OUTPUT  s3, PA_WRITE_UART_DATA
    RETURN

; -----------------------------------------------------------------------------
WaitForAck:
 WaitLoop1:    
    INPUT   s0, PA_READ_LOGCAP_STATUS
    TEST    s0, 00001000'b          ;LogCap Ack Asserted?
    JUMP    Z,  WaitLoop1
    RETURN

WaitForNonAck:
 WaitLoop2:    
    INPUT   s0, PA_READ_LOGCAP_STATUS
    TEST    s0, 00001000'b          ;LogCap Ack Deasserted?
    JUMP    NZ, WaitLoop2
    RETURN    
; -----------------------------------------------------------------------------
IsUartDataPresent:
    INPUT   s0, PA_READ_UART_STATUS
    TEST    s0, 00001000'b          ; Rx Data Present?   Z=1 If not
    RETURN
; -----------------------------------------------------------------------------
WriteLedsHi:  
    LOAD    s0, s1                  ; Copy LEDs to s0 to preserve them
    AND     s0, MSK_LEDS_HI         ; mask out unused bits
    OUTPUT  s0, PA_WRITE_LED_15_8   ;PA_LEDS1508     ; and write pattern to the LEDs 
    RETURN                                  ; and return                                
                


; -----------------------------------------------------------------------------
; Functions Definitions End
; -----------------------------------------------------------------------------    
; Interrupt Stuff Starts
; -----------------------------------------------------------------------------
ADDRESS 300
isr:            
    STORE   s6, SP_TEMP1            ;   save s6, s5
    STORE   s5, SP_TEMP2            ;
    FETCH   s6, SP_SEM              ;   fetch the semaphore
    TEST    s6, FF                  ;   if (SP_SEM == 0) {  // update system register values
    JUMP    NZ, isr_L0              ;   -- ZF == 0 says semaphore != 0
                                            ;       // no - get the data from the rojobot emulator

    ADD     s6, 01                  ;       increment semaphore
    STORE   s6, SP_SEM              ;   }  // update system register values
isr_L0:

    FETCH   s6, SP_TEMP1            ;   restore s6, s5
    FETCH   s5, SP_TEMP2            ;
    RETURNI ENABLE                      ;   and return from interrupt           


ADDRESS 3FF
intvect:        
    JUMP    isr                         ; jump to interrupt service routine
; -----------------------------------------------------------------------------
; Interrupt Stuff Ends
; -----------------------------------------------------------------------------                
                    