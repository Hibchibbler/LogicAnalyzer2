//C&C

#define    STATE_LOGCAP_IDLE                    0
#define    STATE_LOGCAP_PRETRIGGER              1
#define    STATE_LOGCAP_POSTTRIGGER             2

;
; Inputs
;  s0 - byte to buffer
;  s1 - currentIndex
;  s2 - bufferCapacity
; Outputs
;  s0 - 
;  s1 - newIndex
;  s2 - 
AddByteToBuffer:
    STORE s0, (s1)
    ADD s1, 01
    RETURN
    
#define COMMAND_HEADER_SIZE     1
#define COMMAND_PAYLOAD_SIZE    8
#define COMMAND_SIZE            9 //Header+Payload  
Initialize:
    bufferIndex=0
FirmwareLoop:
    If UART Rx Data Present Then
     datum = Read UART
     STORE b, (bufferIndex)
     bufferIndex++;
     
     if (bufferIndex == COMMAND_SIZE){
      JUMP ProcessCommand 
     }else{
      JUMP Upkeep
     }
ProcessCommand:
    index = 0      
    datum = GetDatum(index)
    switch (cmd)
     case StatusRequest
      Read LogCap Status Register
      SendStatusToFrontEnd(Status)
     case Start
      LogCap CmdCode CMD_LOGCAP_START
      while (!LogCap.ACK){}
      LogCap CmdCode CMD_LOGCAP_ACK
      while (LogCap.ACK){}
     case Abort
      LogCap CmdCode CMD_LOGCAP_ABORT
      while (!LogCap.ACK){}
      LogCap CmdCode CMD_LOGCAP_ACK
      while (LogCap.ACK){}
     case Configure Trigger
      index = 1
      
      datum = GetDatum(index)
      index++;
      Write LogCap datum to Reg0 

      datum = GetDatum(index)
      index++;
      Write LogCap datum to Reg1
      
      datum = GetDatum(index)
      index++;
      Write LogCap datum to Reg2
      
      datum = GetDatum(index)
      index++;
      Write LogCap datum to Reg3
      
      datum = GetDatum(index)
      index++;
      Write LogCap datum to Reg4
      
      datum = GetDatum(index)
      index++;
      Write LogCap datum to Reg5
      
      datum = GetDatum(index)
      index++;
      Write LogCap datum to Reg6
      
      datum = GetDatum(index)
      index++;
      Write LogCap datum to Reg7
      
      LogCap CmdCode CMD_LOGCAP_CONF_TRIG
      while (!LogCap.ACK){}
      LogCap CmdCode CMD_LOGCAP_ACK     ; Notify LogCap that we know that they read what we wrote
      while (LogCap.ACK){}
     case Configure Buffers
      index = 1
      
      datum = GetDatum(index)
      index++;
      Write LogCap datum to Reg0 

      datum = GetDatum(index)
      index++;
      Write LogCap datum to Reg1
      
      datum = GetDatum(index)
      index++;
      Write LogCap datum to Reg2
      
      datum = GetDatum(index)
      index++;
      Write LogCap datum to Reg3
      
      LogCap CmdCode CMD_LOGCAP_CONF_BUFF
      while (!LogCap.ACK){}
      LogCap CmdCode CMD_LOGCAP_ACK
      while (LogCap.ACK){}
     case Upload Buffer
      LogCap CmdCode CMD_LOGCAP_STATS
      while (!LogCap.ACK){}
      Read LogCap Reg0 ; Get Total Trace Data Size
      Read LogCap Reg1
      Read LogCap Reg2
      Read LogCap Reg3
      Read LogCap Reg4
      LogCap CmdCode CMD_LOGCAP_ACK     ; Notify LogCap that we read the data 
      while (LogCap.ACK){}
      
      total = magic(Reg0, Reg1, REg2, Reg3)      
      SendFunctionToFrontEnd(DUMP)
      SendDumpSizeToFrontEnd(total)
      
      while (transfered < total){
       LogCap CmdCode CMD_LOGCAP_DUMP    ; Notify LogCap that we want DUMP data
       while (!LogCap.ACK){}              ; Wait for LogCap to acknowledge
       Read LogCap Reg0                 ; Read 8 bytes
       Read LogCap Reg1
       Read LogCap Reg2
       Read LogCap Reg3
       Read LogCap Reg4
       Read LogCap Reg5
       Read LogCap Reg6
       Read LogCap Reg7       
       LogCap CmdCode CMD_LOGCAP_ACK     ; Notify LogCap that we read the data 
       while (LogCap.ACK){}               ; Wait for LogCap to acknowledge
       
       SendDumpChunk(Reg0, Reg1, Reg2, Reg3, Reg4, Reg5, Reg6, Reg7)    
       transfered += 8;
      }
      LogCap CmdCode CMD_LOGCAP_RESET
      while (!LogCap.ACK && !LogCap.ERR){} 
      LogCap CmdCode CMD_LOGCAP_ACK
      while (LogCap.ACK){}
      
      index = 0;                           ;reset buffer for next command
Upkeep:
    if (interrupt fired){
     Toggle LED
    }
    JUMP FirmwareLoop

